Views
=======

Import::

	from django.shortcuts import render_to_response, redirect
	from django.template import RequestContext
	from django.contrib.auth.models import User
	from django.http.response import HttpResponseRedirect
	from django.contrib.auth.decorators import login_required
	from django.contrib.auth import logout
	from administracion.forms import CrearUsuarioForm, ModificarUsuarioForm, CambiarContrasenhaForm, CrearRolForm, ModificarRolForm, CrearTipoAtributoForm, ModificarTipoAtributoForm, CrearProyectoForm, ModificarProyectoForm
	from administracion.models import Rol, Permiso, TipoAtributo, Proyecto, Fase
	from inicio.decorators import permiso_requerido


Gestión de Usuarios
*******************


@login_required(login_url='/login/')

def **gestion_usuarios_view** (request)::

    """
    Permite listar todos los usuarios registrados en el sistema, junto con las 
    operaciones disponibles por cada usuario.
    Requiere estar Logueado.
    """    
    usuarios = User.objects.all()
    ctx = {'usuarios': usuarios}
    return render_to_response('usuario/gestion_usuarios.html', ctx, context_instance=RequestContext(request))


@login_required(login_url='/login/')

@permiso_requerido(permiso="Crear usuario")

def **crear_usuario_view** (request)::
    
    """
    Permite crear un nuevo usuario en el sistema.
    Se crea un formulario y se verifica si la informacion almacenada es valida, 
    de ser asi se crea un objeto para almacenar la informacion y se lo registra en la base de datos.
    Si la informacion no es valida se informa de esto para poder solicitar el re-ingreso de los datos.
    Requiere poseer permiso para la creación de usuarios.
    """
    form = CrearUsuarioForm()
    if request.method == "POST":
        form = CrearUsuarioForm(data=request.POST)
        if form.is_valid():
            username = form.cleaned_data['username']
            email = form.cleaned_data['email']
            password_uno = form.cleaned_data['password_uno']
            first_name = form.cleaned_data['first_name']
            last_name = form.cleaned_data['last_name']
            direccion = form.cleaned_data['direccion']
            telefono = form.cleaned_data['telefono']
            usuario = User.objects.create_user(username=username, email=email, password=password_uno, first_name=first_name, last_name=last_name, direccion=direccion, telefono=telefono)
            usuario.save()
            return HttpResponseRedirect('/administracion/gestion_usuarios/')
        else:
            ctx = {'form':form}
            return render_to_response('usuario/crear_usuario.html', ctx, context_instance=RequestContext(request))
    ctx = {'form':form}
    return render_to_response('usuario/crear_usuario.html', ctx, context_instance=RequestContext(request))


@login_required(login_url='/login/')

@permiso_requerido(permiso="Modificar usuario")

def **modificar_usuario_view** (request, id_usuario)::

    """
    Permite modificar un usuario existente en el sistema.
    Se muestran los valores actuales de los atributos del objeto y se utiliza 
    un formulario de modificación para obtener la información nueva, una vez obtenida 
    se verifica si el formulario es valido, de ser asi se registran los nuevos cambios 
    en el objeto. Si el formulario no es valido se envia un mensaje para solicitar el re 
    ingreso de los datos.
    Requiere poseer permisos para la modificacion de usuarios. 
    """
    usuario = User.objects.get(id=id_usuario)
    if request.method == "POST":
        form = ModificarUsuarioForm(data=request.POST)
        if form.is_valid():
            username = form.cleaned_data['username']
            email = form.cleaned_data['email']
            first_name = form.cleaned_data['first_name']
            last_name = form.cleaned_data['last_name']
            direccion = form.cleaned_data['direccion']
            telefono = form.cleaned_data['telefono']
            usuario.username = username
            usuario.email = email
            usuario.first_name = first_name
            usuario.last_name = last_name
            usuario.direccion = direccion
            usuario.telefono = telefono
            usuario.save()
            return HttpResponseRedirect('/administracion/gestion_usuarios/usuario/%s'%usuario.id)
            
    if request.method == "GET":
        form = ModificarUsuarioForm(initial={
            'username': usuario.username,
            'email': usuario.email,
            'first_name': usuario.first_name,
            'last_name': usuario.last_name,
            'direccion': usuario.direccion,
            'telefono': usuario.telefono,
            })
    ctx = {'form': form, 'usuario': usuario}
    return render_to_response('usuario/modificar_usuario.html', ctx, context_instance=RequestContext(request))


@login_required(login_url='/login/')

@permiso_requerido(permiso="Cambiar contrasenha")

def **cambiar_contrasenha_view** (request, id_usuario)::

    """
    Sirve para cambiar la contraseña de un usuario, requiere poseer 
    permisos para modificar contraseña de un usuario.
    """
    valido = True
    usuario = User.objects.get(id=id_usuario)
    if request.method == "POST":
        form = CambiarContrasenhaForm(request.POST)
        if form.is_valid():
            password_uno = form.cleaned_data['password_uno']
            usuario.set_password(password_uno)
            usuario.save()
            logout(request)
            return redirect('vista_login')
        else:
            valido = False
    if request.method == "GET":
        form = CambiarContrasenhaForm(initial={
            'password_uno': '',
            'password_dos': '',
            })
    ctx = {'form': form, 'valido':valido, 'usuario':usuario}
    return render_to_response('usuario/cambiar_contrasenha.html', ctx, context_instance=RequestContext(request))
  

@login_required(login_url='/login/')

@permiso_requerido(permiso="Eliminar usuario")

def **eliminar_usuario_view** (request, id_usuario)::

    """
    Permite eliminar un usuario existente en el sistema.
    Requiere poseer permiso para la eliminación de usuarios.
    """
    usuario = User.objects.get(id=id_usuario)
    if request.method == "POST":
        User.objects.get(id=id_usuario).delete()
        return HttpResponseRedirect('/administracion/gestion_usuarios/')
    if request.method == "GET":
        ctx = {'usuario':usuario}
        return render_to_response('usuario/eliminar_usuario.html', ctx, context_instance=RequestContext(request))
  

 @login_required(login_url='/login/')

@permiso_requerido(permiso="Visualizar usuario")

def **visualizar_usuario_view** (request, id_usuario)::

    """
    Permite visualizar todos los campos de un usuario existente en el sistema.
    """
    usuario = User.objects.get(id=id_usuario)
    ctx = {'usuario': usuario}
    return render_to_response('usuario/visualizar_usuario.html', ctx, context_instance=RequestContext(request))
 

Gestión de Roles
****************

@login_required(login_url='/login/')

def **gestion_roles_view** (request)::

    """
    Permite listar todos los roles registrados en el sistema, junto con las 
    operaciones disponibles por cada rol.
    Requiere estar Logueado.
    """
    roles = Rol.objects.all()
    ctx = {'roles': roles}
    return render_to_response('rol/gestion_roles.html', ctx, context_instance=RequestContext(request))
 

@login_required(login_url='/login/')

@permiso_requerido(permiso="Crear rol")

def **crear_rol_view** (request)::

    """
    Permite crear un nuevo rol en el sistema.
    Se crea un formulario y se verifica si la informacion almacenada es valida, 
    de ser asi se crea un objeto para almacenar la informacion y se lo registra en la base de datos.
    Si la informacion no es valida se informa de esto para poder solicitar el re-ingreso de los datos.
    Requiere poseer permiso para la creación de roles.
    """
    form = CrearRolForm()
    if request.method == "POST":
        form = CrearRolForm(request.POST)
        if form.is_valid():
            nombre = form.cleaned_data['nombre']
            descripcion = form.cleaned_data['descripcion']
            rol = Rol.objects.create(nombre=nombre, descripcion=descripcion)
            rol.save()
            return HttpResponseRedirect('/administracion/gestion_roles/')
        else:
            ctx = {'form':form}
            return render_to_response('rol/crear_rol.html', ctx, context_instance=RequestContext(request))
    ctx = {'form':form}
    return render_to_response('rol/crear_rol.html', ctx, context_instance=RequestContext(request)) 


@login_required(login_url='/login/')

@permiso_requerido(permiso="Modificar rol")

def **modificar_rol_view** (request, id_rol)::

    """
    Permite modificar un rol existente en el sistema.
    Se muestran los valores actuales de los atributos del objeto y se utiliza 
    un formulario de modificación para obtener la información nueva, una vez obtenida 
    se verifica si el formulario es valido, de ser asi se registran los nuevos cambios 
    en el objeto. Si el formulario no es valido se envia un mensaje para solicitar el re 
    ingreso de los datos.
    Requiere poseer permisos para la modificacion de roles. 
    """
    rol = Rol.objects.get(id=id_rol)
    if request.method == "POST":
        form = ModificarRolForm(data=request.POST)
        if form.is_valid():
            nombre = form.cleaned_data['nombre']
            descripcion = form.cleaned_data['descripcion']
            rol.nombre = nombre
            rol.descripcion = descripcion
            rol.save()
            return HttpResponseRedirect('/administracion/gestion_roles/rol/%s'%rol.id)
            
    if request.method == "GET":
        form = ModificarRolForm(initial={
            'nombre': rol.nombre,
            'descripcion': rol.descripcion,
            })
    ctx = {'form': form, 'rol': rol}
    return render_to_response('rol/modificar_rol.html', ctx, context_instance=RequestContext(request))


@login_required(login_url='/login/')

@permiso_requerido(permiso="Eliminar rol")

def **eliminar_rol_view** (request, id_rol)::

    """
    Permite eliminar un rol existente en el sistema.
    Requiere poseer permiso para la eliminación de roles.
    """
    rol = Rol.objects.get(id=id_rol)
    if request.method == "POST":
        Rol.objects.get(id=id_rol).delete()
        return HttpResponseRedirect('/administracion/gestion_roles/')
    if request.method == "GET":
        ctx = {'rol':rol}
        return render_to_response('rol/eliminar_rol.html', ctx, context_instance=RequestContext(request))


@login_required(login_url='/login/')

@permiso_requerido(permiso="Visualizar rol")

def **visualizar_rol_view** (request, id_rol)::

    """
    Permite visualizar todos los campos de un rol existente en el sistema.
    """
    rol = Rol.objects.get(id=id_rol)
    ctx = {'rol': rol}
    return render_to_response('rol/visualizar_rol.html', ctx, context_instance=RequestContext(request)) 


Gestión de Tipos Atributo
*************************

@login_required(login_url='/login/')

def **gestion_tipos_atributo_view** (request)::

    """
    Permite listar todos los tipos atributo registrados en el sistema, junto con las 
    operaciones disponibles por cada tipo atributo.
    Requiere estar Logueado.
    """
    tipos_atributo = TipoAtributo.objects.all()
    ctx = {'tipos_atributo': tipos_atributo}
    return render_to_response('tipo_atributo/gestion_tipos_atributo.html', ctx, context_instance=RequestContext(request)) 


@login_required(login_url='/login/')

@permiso_requerido(permiso="Crear tipo de atributo")

def **crear_tipo_atributo_view** (request)::

    """
    Permite crear un nuevo tipo atributo en el sistema.
    Se crea un formulario y se verifica si la informacion almacenada es valida, 
    de ser asi se crea un objeto para almacenar la informacion y se lo registra en la base de datos.
    Si la informacion no es valida se informa de esto para poder solicitar el re-ingreso de los datos.
    Requiere poseer permiso para la creación de tipos atributo.
    """
    form = CrearTipoAtributoForm()
    if request.method == "POST":
        form = CrearTipoAtributoForm(request.POST)
        if form.is_valid():
            nombre = form.cleaned_data['nombre']
            descripcion = form.cleaned_data['descripcion']
            tipo_dato = form.cleaned_data['tipo_dato']
            tipo_atributo = TipoAtributo.objects.create(nombre=nombre, descripcion=descripcion, tipo_dato=tipo_dato)
            tipo_atributo.save()
            return HttpResponseRedirect('/administracion/gestion_tipos_atributo/')
            
        else:
            ctx = {'form':form}
            return render_to_response('tipo_atributo/crear_tipo_atributo.html', ctx, context_instance=RequestContext(request))
    ctx = {'form':form}
    return render_to_response('tipo_atributo/crear_tipo_atributo.html', ctx, context_instance=RequestContext(request))


@login_required(login_url='/login/')

@permiso_requerido(permiso="Modificar tipo de atributo")

def **modificar_tipo_atributo_view** (request, id_tipo_atributo)::

    """
    Permite modificar un tipo atributo existente en el sistema.
    Se muestran los valores actuales de los atributos del objeto y se utiliza 
    un formulario de modificación para obtener la información nueva, una vez obtenida 
    se verifica si el formulario es valido, de ser asi se registran los nuevos cambios 
    en el objeto. Si el formulario no es valido se envia un mensaje para solicitar el re 
    ingreso de los datos.
    Requiere poseer permisos para la modificacion de tipos atributo. 
    """
    tipo_atributo = TipoAtributo.objects.get(id=id_tipo_atributo)
    if request.method == "POST":
        form = ModificarTipoAtributoForm(data=request.POST)
        if form.is_valid():
            nombre = form.cleaned_data['nombre']
            descripcion = form.cleaned_data['descripcion']
            tipo_dato = form.cleaned_data['tipo_dato']
            tipo_atributo.nombre = nombre
            tipo_atributo.descripcion = descripcion
            tipo_atributo.tipo_dato = tipo_dato
            tipo_atributo.save()
            return HttpResponseRedirect('/administracion/gestion_tipos_atributo/tipo_atributo/%s'%tipo_atributo.id)
            
    if request.method == "GET":
        form = ModificarTipoAtributoForm(initial={
            'nombre': tipo_atributo.nombre,
            'descripcion': tipo_atributo.descripcion,
            'tipo_dato': tipo_atributo.tipo_dato,
            })
    ctx = {'form': form, 'tipo_atributo': tipo_atributo}
    return render_to_response('tipo_atributo/modificar_tipo_atributo.html', ctx, context_instance=RequestContext(request))


@login_required(login_url='/login/')

@permiso_requerido(permiso="Eliminar tipo de atributo")

def **eliminar_tipo_atributo_view** (request, id_tipo_atributo)::

    """
    Permite eliminar un tipo atributo existente en el sistema.
    Requiere poseer permiso para la eliminación de tipos de atributo.
    """
    tipo_atributo = TipoAtributo.objects.get(id=id_tipo_atributo)
    if request.method == "POST":
        TipoAtributo.objects.get(id=id_tipo_atributo).delete()
        return HttpResponseRedirect('/administracion/gestion_tipos_atributo/')
    if request.method == "GET":
        ctx = {'tipo_atributo':tipo_atributo}
        return render_to_response('tipo_atributo/eliminar_tipo_atributo.html', ctx, context_instance=RequestContext(request))


@login_required(login_url='/login/')

@permiso_requerido(permiso="Visualizar tipo de atributo")

def **visualizar_tipo_atributo_view** (request, id_tipo_atributo)::

    """
    Permite visualizar todos los campos de un tipo atributo existente en el sistema.
    """
    tipo_atributo = TipoAtributo.objects.get(id=id_tipo_atributo)
    ctx = {'tipo_atributo': tipo_atributo}
    return render_to_response('tipo_atributo/visualizar_tipo_atributo.html', ctx, context_instance=RequestContext(request))


Gestión de Proyectos
********************

@login_required(login_url='/login/')

def **gestion_proyectos_view** (request)::

    """
    Permite listar todos los proyectos registrados en el sistema, junto con las 
    operaciones disponibles por cada proyecto.
    """
    proyectos = Proyecto.objects.all()
    ctx = {'proyectos': proyectos}
    return render_to_response('proyecto/gestion_proyectos.html', ctx, context_instance=RequestContext(request))


@login_required(login_url='/login/')

@permiso_requerido(permiso="Crear proyecto")

def **crear_proyecto_view** (request)::

    """
    Permite crear un nuevo proyecto en el sistema.
    Se crea un formulario y se verifica si la informacion almacenada es valida, 
    de ser asi se crea un objeto para almacenar la informacion y se lo registra en la base de datos.
    Si la informacion no es valida se informa de esto para poder solicitar el re-ingreso de los datos.
    Requiere poseer permiso para la creación de proyectos.
    """
    form = CrearProyectoForm()
    if request.method == "POST":
        form = CrearProyectoForm(request.POST)
        if form.is_valid():
            nombre = form.cleaned_data['nombre']
            descripcion = form.cleaned_data['descripcion']
            presupuesto = form.cleaned_data['presupuesto']
            complejidad = form.cleaned_data['complejidad']
            fecha_inicio = form.cleaned_data['fecha_inicio']
            usuario_lider = form.cleaned_data['usuario_lider']
            
            lider = User.objects.get(id=usuario_lider)
            
            proyecto = Proyecto.objects.create(nombre=nombre, descripcion=descripcion, presupuesto=presupuesto, complejidad=complejidad, fecha_inicio=fecha_inicio, usuario_lider=lider)
            proyecto.save()
            return HttpResponseRedirect('/administracion/gestion_proyectos/')
            
        else:
            ctx = {'form':form}
            return render_to_response('proyecto/crear_proyecto.html', ctx, context_instance=RequestContext(request))
    ctx = {'form':form}
    return render_to_response('proyecto/crear_proyecto.html', ctx, context_instance=RequestContext(request))


@login_required(login_url='/login/')

@permiso_requerido(permiso="Modificar proyecto")

def **modificar_proyecto_view** (request, id_proyecto)::

    """
    Permite modificar un proyecto existente en el sistema.
    Se muestran los valores actuales de los atributos del objeto y se utiliza 
    un formulario de modificación para obtener la información nueva, una vez obtenida 
    se verifica si el formulario es valido, de ser asi se registran los nuevos cambios 
    en el objeto. Si el formulario no es valido se envia un mensaje para solicitar el re 
    ingreso de los datos.
    Requiere poseer permisos para la modificacion de proyectos. 
    """
    proyecto = Proyecto.objects.get(id=id_proyecto)
    if request.method == "POST":
        form = ModificarProyectoForm(data=request.POST)
        if form.is_valid():
            nombre = form.cleaned_data['nombre']
            descripcion = form.cleaned_data['descripcion']
            presupuesto = form.cleaned_data['presupuesto']
            complejidad = form.cleaned_data['complejidad']
            fecha_inicio = form.cleaned_data['fecha_inicio']
            usuario_lider = form.cleaned_data['usuario_lider']
            
            lider = User.objects.get(id=usuario_lider)
            
            proyecto.nombre = nombre
            proyecto.descripcion = descripcion
            proyecto.presupuesto = presupuesto
            proyecto.complejidad = complejidad
            proyecto.fecha_inicio = fecha_inicio
            proyecto.usuario_lider = lider
            proyecto.save()
            return HttpResponseRedirect('/administracion/gestion_proyectos/proyecto/%s'%proyecto.id)
            
    if request.method == "GET":
        form = ModificarProyectoForm(initial={
            'nombre': proyecto.nombre,
            'descripcion': proyecto.descripcion,
            'presupuesto': proyecto.presupuesto,
            'complejidad': proyecto.complejidad,
            })
    ctx = {'form': form, 'proyecto': proyecto}
    return render_to_response('proyecto/modificar_proyecto.html', ctx, context_instance=RequestContext(request))


@login_required(login_url='/login/')

@permiso_requerido(permiso="Eliminar proyecto")

def **eliminar_proyecto_view** (request, id_proyecto)::

    """
    Permite eliminar un proyecto existente en el sistema.
    Primeramente se verifica el estado del proyecto para ver si es posible eliminarlo, 
    si es asi se prodece a su eliminacion, caso contrario se informa de la situación.
    """
    proyecto = Proyecto.objects.get(id=id_proyecto)
    valido = True
    if proyecto.estado == 2:
        valido = False
    if request.method == "POST":
        if valido == True:
            Proyecto.objects.get(id=id_proyecto).delete()
            return HttpResponseRedirect('/administracion/gestion_proyectos/')
        else:
            ctx = {'proyecto':proyecto, 'valido':valido}
            return render_to_response('proyecto/eliminar_proyecto.html', ctx, context_instance=RequestContext(request))
    if request.method == "GET":
        ctx = {'proyecto':proyecto, 'valido':valido}
        return render_to_response('proyecto/eliminar_proyecto.html', ctx, context_instance=RequestContext(request))

